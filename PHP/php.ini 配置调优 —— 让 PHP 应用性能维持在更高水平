默认安装的 PHP 就像是在百货商店里购买的普通套装，虽然合身，却不完美。调优的 PHP 就像是定做的套装，完全匹配你的尺寸。不过，需要注意的是，调优 PHP 只是提升 PHP 性能和效率的举措，对拙劣的代码和无响应的 API 调用无计可施。

php.ini文件
PHP 解释器在 php.ini 文件中配置和调优，这个文件在不同操作系统中的位置有所不同，而且一般命令行对应的 php.ini 和 PHP-FPM 对应的 php.ini文件是分开的。这里我们假设配置的是 PHP-FPM 对应的 php.ini，但是下面讲的优化措施适用于所有php.ini。

注：我们首先应该使用 PHP Iniscan工具扫描 php.ini，检查使用了安全方面的最佳实践。

内存
运行 PHP 时需要关心每个 PHP 进程要使用多少内存， php.ini中的 memory_limit设置用于设定单个 PHP 进程可以使用的系统内存最大值。

这个设置的默认值是 128M，这对于大多数中小型 PHP 应用来说或许合适，不过，如果运行的是微型 PHP 应用，可以降低这个值，以便节省系统资源，反之，如果运行的是内存集中型 PHP 应用，可以增加这个值。这个值的大小由可用的系统内存决定，确定给 PHP 分配多少值是一门艺术，决定给 PHP 分配多少内存，以及能负担起多少个 PHP-FPM 进程时，可以根据以下维度信息进行判断：

 

一共可以分配给 PHP 多少内存？以一个 2G 内存的 VPS 为例，这台设备中可能还运行了其他进程，如 MySQL、Nginx 等，那么留 512M 给 PHP 是合适的。
每个 PHP 进程平均耗费多少内存？这个要监控进程的内存使用量，可以使用命令行命令 top，也可以在 PHP 脚本中调用memory_get_peak_usage()函数，不管使用哪种方式，都要多次运行同一个脚本，然后取内存消耗的平均值。
能负担起多少个 PHP-FPM 进程？假设我给 PHP 分配了 512M 内存，每个 PHP 进程平均耗费 15M 内存，那么可以负担起 34 个 PHP-FPM 进程。
有足够的系统资源吗？最后还需要确认有足够的系统资源运行 PHP 应用并处理预期的流量。 
 

注：我们应该使用 Apache Bench 或 Siege 在类似生产环境的条件下对 PHP 应用做压力测试，以确定生产环境是否有足够的资源可用。

Zend OPcache
确定要分配多少内存后，就可以配置 PHP 的 Zend OPcache 扩展，关于这个扩展的详细信息可参考这篇文章：http://laravelacademy.org/post/4396.html。

PHP 5.5.0+ 内置了这个扩展，下面是在 php.ini 文件中配置和优化 Zend OPcache 扩展所用的设置：

opcache.memory_consumption = 64：为操作码缓存分配的内存（单位是MB），分配的内存量应该可以保存应用中所有 PHP 脚本编译得到的操作码，这个值根据应用的体量可以设置成不同大小的值。
opcache.interned_strings_buffer = 16：用来存储驻留字符串的内存量（单位是MB），什么是驻留字符串呢？PHP 解释器在背后会找到相同字符串的多个实例，把这个字符串保存在内存中，如果再次使用相同的字符串，PHP 解释器会使用指针，这么做的目的是节省内存。默认情况下，PHP 驻留字符串会隔离在各个 PHP 进程中，这个设置能让 PHP-FPM 进程池把所有进程驻留字符串存储到共享的缓冲区中，以便在 PHP-FPM 进程池中的多个进程之间引用驻留字符串，这样能节省更多内存。
opcache.max_accelerated_files = 4000：操作码缓存中最多能存储多少个 PHP 脚本，这个值的区间是 2000 到 100000 之间，这个值一定要比 PHP 应用中的文件数大。
opcache.validate_timestamps = 1：这个设置的值为1时，经过一段时间后 PHP 会检查 PHP 脚本的内容是否有变化，检查的时间间隔由 opcache.revalidate_freq 设置指定。如果这个设置的值为0，PHP 不会检查 PHP 脚本的内容是否有变化，我们必须自己动手清除缓存的操作码。建议在开发环境中设置为1，生产环境中设置为0。
opcache.revalidate_freq = 0：设置多久（单位是秒）检查一次 PHP 脚本内容是否有变化。设置为0秒的含义是仅当opcache.validate_timestamps 设置为1时，才会在每次请求时都重新验证 PHP 文件，因此，在开发环境中每次都会重新验证 PHP 文件，在生产环境中则不验证。
opcache.fast_shutdown = 1：这么设置能让操作码使用更快的停机步骤，把对象析构和内存释放交给 Zend Engine 的内存管理器完成。
文件上传
如果你的应用允许上传文件，最好设置最大能上传的文件大小。除此之外，最好还要设置最多能同时上传多少个文件：

file_uploads = 1
upload_max_filesize = 10M
max_file_uploads = 3

默认情况下，PHP 允许在单次请求中上传 20 个文件，上传的文件最大为 2MB，这里我设置为单次请求最多只能上传 3 个文件，每个文件最大为 10MB，这个值不要设置太大，否则会出现超时。

注：如果非要上传大文件，Web 服务器的配置也要做相应调整。除了在 php.ini 中设置之外，还要调整 Nginx 虚拟主机配置中的 client_max_body_size 设置。

最长执行时间
php.ini 文件中的 max_execution_time 用于设置单个 PHP 进程在终止之前最长可运行时间。这个设置默认是 30 秒，建议将其设置为 5 秒：

max_execution_time = 5

注：在 PHP 脚本中可以调用 set_limit_time() 函数覆盖这个设置。

假设我们想要生成报告，并把结果制作成 PDF 文件，这个任务可能要花 10 分钟才能完成，而我们肯定不想让 PHP 请求等待 10 分钟，我们应该单独编写一个 PHP 文件，让其在单独的后台进程中执行，Web 应用只需几毫秒就可以派生一个单独的后台进程，然后返回 HTTP 响应：

<?php
exec('echo "create-report.php" | at now');
echo 'report pending...';

create-report.php 在单独的后台进程中运行，运行完毕后可以更新数据库，或者通过电子邮件把报告发给收件人。不过这种用法很少见，更多时候我们是通过异步消费队列来实现类似的功能，无论从安全性、扩展性、可维护性上来讲，效果更好，相关的组件有轻量级消息队列 PHPResque 等。

处理会话
PHP 默认的会话处理程序会拖慢大型应用，因为这个处理程序会把会话数据存储在硬盘中，需要创建不必要的磁盘 I/O，浪费时间。我们应该把会话数据保存在内存中，例如可以使用 Memcached 或 Redis。这么做还有个额外好处 —— 以后便于伸缩。如果会话数据存储在硬盘中，不便于增加额外的服务器，如果把会话数据存放在 Memcached 或 Redis 里，任何一台分布式 PHP-FPM 服务器都能访问会话数据。

如果想把会话数据保存在 Memcached 中，需要做如下配置：

session.save_handler = 'memcached'
session.save_path = '127.0.0.1:11211'

缓冲输出
如果是在较少的块中发送更多数据，而不是在较多的块中发送较少的数据，那么网络的效率会更高，也就是说，在较少的片段中把内容传递给访问者的浏览器，能减少 HTTP 请求总数。

因此，我们要让 PHP 缓冲输出，默认情况下，PHP 已经启用了输出缓冲功能，PHP 缓冲 4096 字节的输出之后才会把内容发送给 Web 服务器，推荐配置如下：

output_buffering = 4096
implicit_flush = false

注：如果想要修改输出缓冲区的大小，确保使用的值是4（32位系统）或8（64位系统）的倍数。

真实路径缓存
PHP 会缓存应用使用的文件路径，这样每次包含或导入文件时就无需不断搜索包含路径了，这个缓存叫真实路径缓存（realpath cache），如果运行的是大型的 PHP 文件（如 Composer 组件），使用了大量文件，增加 PHP 真实路径缓存的大小能得到更好的性能。

真实路径缓存的默认大小是 16K，这个缓存所需的准确大小不容易确定，不过可以使用一个小技巧：首先，增加真实路径缓存的大小，设置为特别大的一个值，如 256K，然后，在一个 PHP 脚本的末尾加上 print_r(realpath_cache_size());，输出真实路径缓存的真正大小，最后，把真实路径缓存的大小改为这个真正的值。我们可以在 php.ini 文件中设置真实路径缓存的大小：

realpath_cache_size = 64K